

import Head from 'next/head'
import { useState } from 'react'
import styles from '../styles/Game.module.css'
import { useRouter } from 'next/router'
import { io } from 'socket.io-client'
const socket = io.connect('http://localhost:8000')


export default function Home({gameBoxs}) {

  const [start_game, setStartGame] = useState(false);
  const [waiting_for_2nd_player, set_waiting_for_2nd_player] = useState(true);

  const [curPlayer, setCurPlayer] = useState('x');

  const router = useRouter(); 

  const boxClickHandler = (e)=>{
    
    const targetId = e.target.id;
    if(!waiting_for_2nd_player){

      gameBoxs.map(box => {
      
        if(box.index == targetId && !box.checked){
          box.checked = true;
          box.player = curPlayer;
          e.target.setAttribute('player',`player${curPlayer}`);
          /* checkWinner({
            player: curPlayer,
            data: gameBoxs
          }) */
          curPlayer == 'x'? setCurPlayer('o') : setCurPlayer('x');
          socket.emit('gameBoard', {
            gameBoxs,
            targetId,
            prevPlayer: curPlayer,
            curPlayer: curPlayer == 'x'? 'o':'x'
          })
        }
      }) 
    }
  }

  socket.on('gameChanges', ({gameBoard, targetId, prevPlayer, cur_player})=>{
    console.log('receiver', cur_player);
    setCurPlayer(cur_player)
    gameBoxs = gameBoard;
    document.getElementById(targetId).setAttribute('player',`player${prevPlayer}`);

  })

  socket.on('gameProgress', ({winner, draw, player})=>{
    if(winner){
      setStartGame(false)
      alert(`the winner is ${player}`)

    }else if(draw){
      setStartGame(false)
      alert("it's a draw")
    }
  })

  


  const joinRoom = (e)=>{
    console.log(gameBoxs);
    if(router.query.hasOwnProperty('room')){
      socket.emit('joinRoom', {room: router.query.room})
    }else{
      socket.emit('joinRoom', {room:null, gameBoxs})
    }
  }
  socket.on('path', ({path})=>{
    router.push({
      pathname: '/',
      query: {
        room: path
      }
    });
  })



  socket.on('startGame', ()=>{
    set_waiting_for_2nd_player(false)
  })


  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {(start_game && !waiting_for_2nd_player) && <div className={styles.curPlayer}>{curPlayer}</div>}

      <main className={styles.container}>
        
        { !start_game && <link 
          className={styles.start_btn}
          id='room1'
          href='/' 
          onClick={(e)=>{
            joinRoom()
            setStartGame(true)
          }}
          >
            start
          </link>}
        

        {start_game && <div className={styles.gameBoard}>
          {
            gameBoxs?.map(box => (
              <div 
                onClick={boxClickHandler} 
                key={box.index} 
                id={box.index} 
                className={styles.box}>
              </div>
            ))
          }
        </div>
        }
      </main>
      {
        (start_game && waiting_for_2nd_player) && <div className={styles.waiting}>waiting for second player</div>
      }
    </>
  )
}


export function getServerSideProps(){
  const gameBoxs = Array.from([...Array(9)], (x, i) =>({
    index: i,
    checked:false,
    player: null
    }));

  return{
    props:{
      gameBoxs
    }
  }
}
